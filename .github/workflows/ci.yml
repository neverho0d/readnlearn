name: CI/CD Pipeline

on:
    push:
        branches: [main, dev]
    pull_request:
        branches: [main, dev]

jobs:
    test:
        name: Test & Coverage
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: "package.json"

            - name: Install dependencies
              run: npm ci

            - name: Run type check
              run: npm run type-check

            - name: Run linting
              run: npm run lint

            - name: Run tests with coverage
              run: npm run test:coverage

            - name: Upload coverage reports
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage/lcov.info
                  flags: unittests
                  name: codecov-umbrella
                  fail_ci_if_error: false

    build:
        name: Build Application
        runs-on: ${{ matrix.os }}
        needs: test

        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                include:
                    - os: ubuntu-latest
                      platform: linux
                    - os: windows-latest
                      platform: windows
                    - os: macos-latest
                      platform: macos

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            # Ensure Node deps (including @tauri-apps/cli) are installed for Linux build
            - name: Setup Node.js (Linux)
              if: matrix.os == 'ubuntu-latest'
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: "package.json"

            - name: Install dependencies (Linux)
              if: matrix.os == 'ubuntu-latest'
              run: npm ci

            - name: Install Linux system dependencies
              if: matrix.os == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y \
                    libwebkit2gtk-4.1-dev \
                    libgtk-3-dev \
                    libglib2.0-dev \
                    pkg-config \
                    build-essential \
                    libssl-dev \
                    libayatana-appindicator3-dev \
                    librsvg2-dev

            # Linux: build via official Tauri Action (containerized)
            - name: Build (Linux via Tauri Action)
              if: matrix.os == 'ubuntu-latest'
              id: tauri_build_linux
              uses: tauri-apps/tauri-action@v0
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

            # Windows/macOS: also use official Tauri Action
            - name: Setup Node.js (Non-Linux)
              if: matrix.os != 'ubuntu-latest'
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: "package.json"

            - name: Install dependencies (Non-Linux)
              if: matrix.os != 'ubuntu-latest'
              run: npm ci

            - name: Build (Windows/macOS via Tauri Action)
              if: matrix.os != 'ubuntu-latest'
              id: tauri_build_nonlinux
              uses: tauri-apps/tauri-action@v0
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

            # After the Tauri build steps
            - name: Gather built artifacts
              id: gather_artifacts
              shell: bash
              run: |
                  set -euo pipefail
                  ROOT="${{ github.workspace }}/src-tauri/target/release/bundle"

                  echo "Searching for built artifacts under: $ROOT"
                  if [[ ! -d "$ROOT" ]]; then
                    echo "Bundle dir not found. Nothing to upload."
                    exit 0
                  fi

                  FILELIST="$(mktemp)"

                  # BSD 'find' can return non-zero even when that's harmless; don't let that fail the job.
                  set +o pipefail
                  find "$ROOT" -type f \
                    \( -name '*.dmg' -o -name '*.app.tar.gz' -o -name '*.msi' -o -name '*.exe' \
                       -o -name '*.zip' -o -name '*AppImage' -o -name '*.deb' -o -name '*.rpm' \) \
                    2>/dev/null | sort > "$FILELIST" || true
                  set -o pipefail

                  echo "Found $(wc -l < "$FILELIST" | tr -d ' ') files:"
                  cat "$FILELIST" || true

                  # Nothing? then skip upload gracefully
                  if [[ ! -s "$FILELIST" ]]; then
                    echo "No artifacts to upload."
                    exit 0
                  fi

                  # Pass newline-separated paths to upload-artifact
                  {
                    echo "paths<<EOF"
                    cat "$FILELIST"
                    echo "EOF"
                  } >> "$GITHUB_OUTPUT"

            - name: Upload artifacts
              if: steps.gather_artifacts.outputs.paths != ''
              uses: actions/upload-artifact@v4
              with:
                  name: readnlearn-${{ matrix.platform }}
                  path: ${{ steps.gather_artifacts.outputs.paths }}
                  if-no-files-found: error
                  retention-days: 30

    security:
        name: Security Audit
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: "package.json"

            - name: Install dependencies
              run: npm ci

            - name: Run security audit
              run: npm audit --audit-level=moderate

            - name: Setup Rust (for cargo-audit)
              uses: dtolnay/rust-toolchain@stable

            - name: Install cargo-audit
              run: cargo install cargo-audit

            - name: Run cargo audit (sqlite-only; ignore MySQL advisory)
              run: cargo audit --ignore RUSTSEC-2023-0071
              working-directory: ./src-tauri

            - name: Setup Rust (for cargo-audit)
              uses: dtolnay/rust-toolchain@stable

            - name: Install cargo-audit
              run: cargo install cargo-audit

            - name: Run cargo audit (sqlite-only; ignore MySQL advisory)
              run: cargo audit --ignore RUSTSEC-2023-0071
              working-directory: ./src-tauri
